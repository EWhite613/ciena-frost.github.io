module.exports = [ { id:"overview",
    alias:"Overview",
    type:"category",
    route:"overview",
    items:[ { id:"vision",
        alias:"Vision",
        type:"route",
        route:"overview.vision",
        keywords:"polygon fill 009eef points 128 9 106 4 128 9 221 5 23 6 221 5 121 5 95 polygon fill 005957 points 18 3 236 3 128 9 236 3 128 9 331 polygon fill f06034 points 303 7 118 9 143 7 118 9 143 7 105 1 203 3 14 8 270 8 118 3 285 2 95 polygon fill 009999 points 383 221 5 143 7 221 5 143 7 136 8 317 5 136 8 polygon fill 43c9f7 points 141 2 344 9 141 2 233 8 395 1 233 8 203 3 398 1 path fill ffffff d m388 3 236 3l 185 158 5l 59 6 51v236 3h388 3 m401 9 231 3h 13 5h143 7h 5v5v107 4v2 3l1 7 1 5l59 6 51 l3 3 2 8l3 3 2 8l185 158 5l401 9 231 3l401 9 231 3z frost ui styles conventions patterns and code for ciena what is frost an initiative to establish common styles conventions and code for ciena uis using a collaborative approach inspired by open source projects goals consistency frost focuses on producing a consistent look and feel across the ciena suite of ui products common ui elements and patterns are identified and standardized for use in all ciena uis consistency provides the following benefits professional styling ui often drives perception of a product shared use of visual interaction designers user experience well designed workflow and user interaction patterns for common ciena user personas user experience productivity one ui paradigm learned once used everywhere brand awareness all uis across the ciena suite are easily identified as ciena uis lower development costs common ui decisions and development are done once for all products increased robustness uis are tested across multiple product bases community a strong development community is able to accomplish far more than any individual could hope to accomplish cross product collaboration strengthens the bonds between developers and broadens perspectives some benefits of a large community are faster development solutions to standard problems are provided so that more time can be spent building unique product features more experience more angles are considered when developing common components shared responsibility the weight of research and development is distributed better support solutions to issues are usually in the community more people are available for questions cross product development code bases are predictable developers can ramp up quickly convention common use cases should be easy to develop frost buys into a convention over configuration philosophy frost components and css are developed with a focus on strong defaults less boilerplate faster features when defaults don t suffice frost allows granular control of presentation and logic some custom solutions will be completely unique many will be useful to the frost community everyone is encouraged to contribute to the project and help is available for new community members abstraction the web ecosystem evolves at a torrid pace new standards frameworks and components emerge on a weekly basis and tracking the flood of information can be a full time job to avoid being left behind while simultaneously keeping products stable frost abstracts the implementation of solutions behind a stable frost component interface allowing the implementation to evolve while the usage remains stable when interfaces change frost makes use of semantic versioning to avoid breaking existing products " },
      { id:"roadmap",
        alias:"Roadmap",
        type:"route",
        route:"overview.roadmap",
        keywords:"last update 2016 02 25 streamline the addon porting process frost cli publish ember frost info bar publish ember frost link publish ember frost list publish ember frost radio publish ember frost application bar add autoprefixer to ember frost css core document addon philosophy best practices create an internal svg project to extend ember frost icons publish ember frost checkbox publish ember frost theme css variables publish ember frost css support basic documentation contribution publish eslint config frost standard publish pr bumper capture the dependency graph for the transition to oss components publish ember frost icons svgs publish ember frost button publish ember frost text can we create frost as an interface library publish ember frost bunsen publish ember frost checkbox publish ember frost select publish ember frost sort publish ember frost loading publish ember frost badge publish ember frost object browser publish ember frost about dialog publish ember frost password publish ember frost modal input publish ember frost login publish ember frost navigation publish ember frost text area publish ember frost date picker publish ember frost slider publish ember frost object details update the ember frost theme demo ember frost svg modular svgs update the frost org page to include the sub org leads draw the oss line for march send out frost welcome email " },
      { id:"defects",
        alias:"Defects",
        type:"route",
        route:"overview.defects",
        keywords:"we re still looking for a good way to track frost defects across projects have a defect or a suggestion on how to manage this send a message to the frost slack channel " },
      { id:"changelog",
        alias:"Changelog",
        type:"route",
        route:"overview.changelog",
        keywords:"coming soon " } ] },
  { id:"development",
    alias:"Development",
    type:"category",
    route:"development",
    items:[ { id:"environment",
        alias:"Environment",
        type:"route",
        route:"development.environment",
        keywords:"frost uses ember cli and ember cli addons for tooling builds and project conventions functionality includes addon ecosystem content security policy deployment pipeline development server file watching fingerprint checksums github bitbucket pages deployment live reload minification scaffolding subresource integrity whitespace conventions mac ruby e curl fssl https raw githubusercontent com homebrew install master install install homebrew brew install nvm install nvm node version manager and nodejs nvm install 0 12 npm install g ember cli install ember cli and related dependencies npm install g phantomjs npm install g bower edit npmrc and add registry http artifactory ciena com api npm blueplanet npm linux curl https raw githubusercontent com creationix nvm v0 11 1 install sh bash install nvm node version manager and nodejs source bash_profile nvm install 0 12 npm install g ember cli install ember cli and related dependencies npm install g phantomjs npm install g bower edit npmrc and add registry http artifactory ciena com api npm blueplanet npm windows vagrant with a linux variant is recommended but if you feel adventurous ember cli windows may help install nvm windows nvm install 0 12 npm install g ember cli install ember cli and related dependencies npm install g ember cli windows ember cli windows npm install g phantomjs npm install g bower edit npmrc and add registry http artifactory ciena com api npm blueplanet npm " },
      { id:"app",
        alias:"App",
        type:"route",
        route:"development.app",
        keywords:"frost leverages a number of open source projects and ciena built addons for app development functionality includes addons animation css polyfills code coverage code style components d3 visualization date formatting data stores debugging dependency injection es6 frost addons functional programming ember lodash mocking object binding observation responsive layout rest conventions routing services scss variables and patterns svg icons and images templating testing with mocha project structure most features in a frost app routes controllers template components are organized using pods pod with generators with the exception of the following top level entities data models adapters serializers mirage mock server faker database routing services including initializers transitions animation hooks until pods 2 0 is released it s up to individuals to follow these conventions running an existing project git clone cd npm install bower install ember server open a browser to http 4200 to view the project creating a new project npm install g fr cli init fr init answer questions cd ember init ember install frost cli ember frost init answer yes press enter for all prompts rm rf nodemodules bowercomponents npm install bower install ember server open a browser to http 4200 to view the project testing a project run ember test or alternatively run ember server and open a browser to 4200 tests coverage deploying a project http ember cli com user guide deployments " },
      { id:"addon",
        alias:"Addon",
        type:"route",
        route:"development.addon",
        keywords:"all functionality from app development is available as well as a dummy application for development testing project structure addon projects consist of 4 main parts the addon directory code for the addon the app directory code that merges with the consuming app s namespace the tests directory contains standard testing and a dummy app directory with a development application the index js and ember cli build js files index js manages the addon build for a consuming app while ember cli build js manages the build for the dummy app addon namespaces addons are given a separate namespace within ember apps for instance the component in the frost button project could be imported using import component from frost button pods components frost button component to add a component into the app namespace the component can be re exported in the addon s app directory e g app frost button js export default from frost button pods components frost button component this re export allows the component to be referenced in a consuming app s templates directly e g frost button addon conventions addon projects are generated with a component and template e g frost button addon pods components frost button component js template hbs a component scss e g frost button addon styles addon scss _frost button scss with bourbon and frost css imported a re export of the component into the app namespace a demo route for the component e g frost button tests dummy app pods demo route js controller js template hbs default routing for the demo standard tooling including scss compilation mocha and mirage testing jscs etc running an existing project git clone cd npm install bower install ember server open a browser to http 4200 to view the project creating an addon project ember addon cd ember install frost cli ember frost init answer yes press enter for all prompts rm rf nodemodules bowercomponents npm install bower install ember server open a browser to http 4200 to view the addon demo testing an addon run ember test or alternatively run ember server and open a browser to 4200 tests coverage publishing an addon frost addons are published internally to artifactory this is currently a manual process e g npm publish " },
      { id:"learning",
        alias:"Learning",
        type:"route",
        route:"development.learning",
        keywords:"ember is a stable project with good documentation something frost is working to emulate here are a few resources to get you started ember guides ember apis ember cli 101 up to date free we have copies rock and roll with ember js up to date not free we have a few copies pragmatic progammer up to date not free we don t have a copy weekly newsletter ember global meetup from the comfort of your home local meetups ember slack cause slack is awesome ember twiddle play with code community frost in slack ciena meetups recordings are somewhat dated look for more in 2016 ember frost 101 ember addons frost example async loading component and image testing frost 1 0 preview " },
      { id:"notes",
        alias:"Notes",
        type:"route",
        route:"development.notes",
        keywords:"ides we currently recommend visual studio code or webstorm although editors are really a personal preference visual studio code enable auto save install handlebars ember cli editorconfig jscs linting terminal shortcut command shift c update settings search exclude node_modules true bower_components true dist true tmp true webstorm setup " } ] },
  { id:"design-strategy",
    alias:"Design Strategy",
    type:"category",
    route:"design-strategy",
    items:[ { id:"usability-myths",
        alias:"Usability Myths",
        type:"route",
        route:"design-strategy.usability-myths",
        keywords:"usability is just common sense well designed web sites and products look simple and are easy to use the better designed a product or web site is the more the uninitiated will view the result as obvious and just a matter of common sense they don t comprehend the effort expertise and process that was necessary to make the user interface feel natural and look right all you need to do is think like a user a common statement heard from developers and programmers unfortunately you must be a user to think like a user most users will bring a different context and a different set of experiences to their interpretation and understanding of a product than a developer or even a usability expert will you can t know what a user thinks like if you don t study them usability is obtained through better graphic design many managers never use the products they purchase or develop they see demos instead of having hands on experience what they like or don t like is largely based on visual impressions the focus on the graphic appearance rather than the interaction leads them to a belief that better graphic design will mean better usability usability is just a matter of following design guidelines following good design guidelines is often the smart thing to do however most design guidelines are general and vague they can also be contradictory there is plenty of room for bad designs that still meet all the design guidelines guidelines must be reinforced with user studies and good usability engineering process usability is designing for the typical user there is no such thing as a typical user most user populations are diverse and include a range of people with differing strengths experiences knowledge and skills designing for the typical user may make a site or product unusable for a large number of users who are not typical it will be the atypical users who make most of the calls for customer service the system is inherently usable because it was designed by users having users participate in the specification and design of a system is not enough many users don t recognize the difference between a wish list and a requirement suggested ui improvements are made without thought of secondary consequences user participation needs to be managed by someone with participatory design experience and skills usability testing the product at the end of development is sufficient leaving usability to a test at the end is the height of irresponsible optimism usually the most serious usability issues are embedded in the product architecture finding and fixing them must be done early in the project usability engineering will add to development time and cost approximately 50 of the average software project cost and time is spent defining and resolving user interaction issues and implementing the user interface correcting mistakes made in the original design ends up taking even more time remember code changes at the end of product development are 4 to 10 times the cost of an early change up front usability engineering saves time and money " },
      { id:"branding",
        alias:"Branding",
        type:"route",
        route:"design-strategy.branding",
        keywords:"coming soon " } ] },
  { id:"design-conventions",
    alias:"Design Conventions",
    type:"category",
    route:"design-conventions",
    items:[ { id:"colors",
        alias:"Colors",
        type:"route",
        route:"design-conventions.colors",
        keywords:"coming soon ",
        items:[ { id:"min",
            alias:"First",
            type:"route",
            route:"link.min" } ] },
      { id:"layout",
        alias:"Layout",
        type:"route",
        route:"design-conventions.layout",
        keywords:"coming soon ",
        items:[ { id:"min",
            alias:"First",
            type:"route",
            route:"link.min" } ] },
      { id:"text",
        alias:"Text",
        type:"route",
        route:"design-conventions.text",
        keywords:"coming soon " },
      { id:"typography",
        alias:"Typography",
        type:"route",
        route:"design-conventions.typography",
        keywords:"coming soon ",
        items:[ { id:"min",
            alias:"First",
            type:"route",
            route:"link.min" } ] } ] },
  { id:"design-patterns",
    alias:"Design Patterns",
    type:"category",
    route:"design-patterns",
    items:[ { id:"about",
        alias:"About",
        type:"route",
        route:"design-patterns.about",
        keywords:"when to use the about screen is a basic informational dialog available in any blue planet installation blue planet will always offer an about screen to give further details about what is installed users and support staff may consult this for clarity on specific versions installed components copyright information and 3rdparty legal attributions as needed in the field this information is most useful in the context of a support request ux ui components logo spectrum strip the full blue planet marketing logo with blue planet spectrum strip version blue planet version legal text includes copyright trademark close button interaction design the about screen is accessible via the application bar s system menu once opened it opens the about content into a modal dialog future considerations in the future there may be a link from the about dialog to display the full system info including installed solutions application modules micro services and their versions users may be able to view more detailed system information about installed components their versions and even 3rdparty components installed this would most likely be used when interacting with ciena support today we are just displaying the blue planet version number " },
      { id:"application-bar",
        alias:"Application Bar",
        type:"route",
        route:"design-patterns.application-bar",
        keywords:"when to use always the application bar is a pattern that is ubiquitous to every page in blue planet its primary function is as an always present navigation tool for the user ui components logo home link click to return to landing page also displays branding network menu opens menu of network related applications e g service browsing provisioning alarms system menu opens menu of blue planet system related applications e g nms health security settings global search button opens a keyword search field to search for objects globally across the system notification button opens notification tray see notifications badge indicates new notifications user menu displays currently logged in user click to open menu of user specific actions applications interaction design navigating to specific applications navigation to the various deployed applications is available in the menus on the application bar these will include network applications used to interact with the managed network system applications to manage the blue planet system itself user applications specifically for the logged in user e g change pwd preferences logout note if 3rdparty oem applications are deployed into blue planet an additional menu can be added to accommodate them next to the network system menus name tbd menus can be further laid out into columns to help categorize applications the goal of this categorization is to help the user find what they re looking for by matching their mental model as much as possible for example the network menu can be subdivided into applications related to resources services and troubleshooting the system menu may be organized into configuration system health and security applications the number of columns can vary depending on the solution extra explanatory text may be added below application titles as a form of information scent to help users know what to expect when they click the link this is especially helpful when application names are ambiguous due to different meanings in the industry or between customers a classic example is with the word service which is often overloaded in the industry however if the application name is clear hopefully most cases then there is no need for extra descriptive text menus will only show what a user has permission to see e g based on security privileges it might even be possible to let users administrators customize what they see in their menus to match their defined operational role within their company any management of this beyond security is tbd and outside the scope of this page clicking on menu items will replace the current page by default however the ability to open into a new tab or window will be ubiquitous throughout the application to facilitate using multiple screens and flexibly organizing screens to suit the user s workflow the option to do so will be clearly consistently visible to the end user for more details see links global search clicking the global search icon opens the global search keyword input field allowing the user to search for and directly navigate to a page that s of interest for a description of this pattern see global search notifications the system alerts users with various events that are of specific interest them relating to their own activities in blue planet this includes notifications of errors activity progress completion next steps for long running activities etc they are accessible via the application bar s notification tray new notifications are reinforced visually with a badge on the notification icon for more details see notifications user the user icon displays the name of the currently logged in user clicking on the user menu icon will open a menu for more details see login logout " },
      { id:"date:time-input",
        alias:"Date:time Input",
        type:"route",
        route:"design-patterns.date:time-input",
        keywords:"coming soon " },
      { id:"error-page",
        alias:"Error Page",
        type:"route",
        route:"design-patterns.error-page",
        keywords:"when to use when an http error is encountered such that the requested content cannot be displayed and the page cannot be appropriately redirected to more suitable content replace with a blue planet branded error page an example of suitable redirection would be upon receiving an error indicating the user is unauthenticated in this case it would be appropriate to redirect them to the login page ux ui components application bar problem description brief user centric problem description next steps what the user can do to recover if anything e g try again later contact your administrator http error code error title server side error message provides more context of internal call failure written in text a user can understand e g failed to retrieve equipment details link allows user to see gory details of any exception handling that the server produces ideally the text here explains the nature of the problem and possible causes in detail any further troubleshooting information should be provided here interaction design explanatory text should be expressed in terms that are easy to understand for an end user and avoid developer jargon do not assume the user understands the internals of the server side infrastructure rest apis or http error semantics error message should use a tone that is consistent with the overall tone used in blue planet see recommendations on use of style tone under text users and support staff can click the show details to view the full details that will help troubleshoot the issue the details will be shown on the same page in a scrollable area with a corresponding tertiary button to hide details it s ok to express the details in very technical terms since the intended audience is typically a more advanced user and or ciena customer support match the web browser tab s title to the main title of the error page this will help users differentiate it from other browser tabs " },
      { id:"filtering",
        alias:"Filtering",
        type:"route",
        route:"design-patterns.filtering",
        keywords:"when to use when users need to narrow an inventory of objects to a subset available filters are displayed in a filter pane and dynamically applied to the list of objects this pattern is prominently available in the object browser in the global search results and may also be applied to other types of inventories for example the network map is a visual inventory of nes and links ux ui components filter section collapsible section containing the filterable attribute name and filter inputs filtered count the number of results that match the currently set filter out of the total applied filters badges global badge indicates the number of filters currently applied to the result set click on the icon to view the specifics remove individual filters or clear them all filter specific badges for collapsed filters only appears when there is as filter applied lt vd tbd use of badge indicator may change gt scroll bar if contents are too long for the visible area for detailed visual design see filter pane interaction design filters reflect the result set the filter pane only contains filters that pertain to the initial result set this means that the available filters are attributes of the objects in the initial result set for example if the result set only contains alarms then only alarm attributes will be available as possible filters further if these alarms only contain alarms on 6500 8700 nes then the device type filter will only have 2 checkboxes 6500 and 8700 if the result set contains different object categories these categories will appear as filterable attributes at the top of the filter pane initially all are shown in the result set until the user chooses to narrow down their set note if there is logical grouping of categories based on commonality of filters display the hierarchy amongst the categories for example if links are grouped in the infrastructure browser then links may be a grouping for all different types of links lldp otu osrp lags etc if the result set contains multiple categories the set of displayed filters initially shows only filterable attributes that are common to all categories for example if a list of services contains both evpl and otn services then only their common attributes e g type state protection are displayed specialized attributes are only displayed once the user has selected a specific category common filters for the scope of the browser are visually grouped and displayed first followed by category specific ones if drilled into a category selecting a specific category extends the filter pane to show that category s specific filters as well if the user selects a filter value that maps only to a specific category all non applicable categories are automatically removed from the category section for example if dynamic mpls tp is selected for the protection filter this would remove any non applicable category e g direct wavelength access and ethernet otn mapped within a given filter selected filter values are logically or ed together for example if a user filters on state down and state troubled in a services browser that would filter the results set to all services that are either down or troubled selected filters between multiple filter types are logically and ed together for example if the user filters on state down and rate 10ge that would filter the result set to all 10ge services that are down apply filters immediately upon selection if results can be returned almost immediately to the user if applying the filter will take some time it is better to let the user batch their filter requests and offer an explicit button for them to perform the filter on the list see comparison of batch filtering vs interactive filters lt note this requires feedback from architecture development to determine which way we need to go if there is a need for batch filtering we ll have to adjust the visuals to incorporate the ability to apply filters gt facet non faceted filters there are two major types of filters in a filter pane facet filters are filterable attributes of the result set that are broken down into discrete options based on values of the result set for example if an ne list only contains 6500 and 5430 nes then you can only filter on 6500 and 5430 values for the facet filter called ne type and not 8700 non faceted filters are filterable attributes of the result set but do not describe the actual values of the result set if an object attribute can be faceted it should be facet filtering on large datasets helps users understand what they can filter on to quickly refine their results appropriately since the filters describe only what s in the result set it also prevents dead end filtering empty lists then backing away only to try again with a different filtering approach filters work independently of each other they can be added removed in arbitrary order users can clear all selections for a specific filter when the user selects a filter value a clear button appears to clear selections for a filter filter sections that are longer than one line of vertical space can be manually collapsed by default all filter sections are expanded and the filter pane scrolls independently filters are displayed in order of priority within the filter pane a filter s priority is determined based on how likely users will want to use it for refining their result set this way users should be able to find the filter they re most likely to use in the top section of filters avoiding having to scroll within the panel except in less common scenarios facet filters facet filters are accompanied by facet counts for the number of matches for each value called information scent t he facet counts give the user an indication on how many objects in the result set would be shown hidden by toggling any particular facet value this helps the user understand how they can most effectively narrow the results note sometimes objects can be tagged with multiple values for a given filter counts must reflect this accurately for example if filtering nes by technology layer a given 6500 ne may be both a photonic roadm and an otn switch selecting roadms may leave otn switches in the filtered result set facet counts for a facet value are related and influenced by the shown counts from other facet values for example consider these two facet filters for a data set of alarms severity critical major minor warning indeterminate alarm type communications equipment processing performance etc these filters act separately but are not mutually exclusive if the user filters on severity critical major the facet counts in the alarm type filter adjust downwards to indicate the number that are also either critical or major some may even go to zero nil as shown here facet values and counts update to reflect dynamic changes in the result set most result sets can update dynamically new objects match the specified filters and previously matching objects no longer do for example if an initial search only matches major minor severity alarms and later a critical is raised that matches the search the filter will dynamically update to include critical as a visible facet value with the appropriate count when facet filters are initially displayed after setting the search context they appear unselected however since the filter values are derived from the result set they are all in scope selecting a filter indicates that you want to filter to that specific value use checkboxes when a facet filter has less than x possible values checkboxes are checked upon user selection values are ordered in their default sort order see sorting use a simple drop down when a facet filter has between x y possible values values are ordered in their default sort order see sorting use an auto complete text field when a facet filter has more than y possible values users first type directly into the text field to scope the values to the characters they ve entered and then can select a value from a drop down of matches an example where this might be used is for a filter on ne name non faceted filters filter panes may also include attributes that are useful to narrow down the result set even if they cannot be presented as discrete selectable values with associated counts for example a matching substring for an ne name wavelengths with q values bigger smaller between x y or events that occurred before after between times in all cases these filters are not expressed on discrete values and thus cannot be counted ahead of time some possible examples of these types of filters are shown below these are for illustration only visual design of these input types are described in separate design patterns ui components such as date time input rr and slider ip " },
      { id:"forms",
        alias:"Forms",
        type:"category",
        route:"design-patterns.forms",
        items:[ { id:"overview",
            alias:"Overview",
            type:"route",
            route:"design-patterns.forms.overview",
            keywords:"when to use forms are used for everything from provisioning new services creating planned network entities editing object attributes and editing system configuration settings all forms in blue planet follow a consistent layout and interaction pattern specific types of forms require different completion feedback interaction as explained in the accompanying pattern descriptions ui ux components form dialog appears at fixed position 80px from the top of browser s visible area centered horizontally dynamically expands downwards upon appearance of conditional fields until it hits the bottom edge of the web browser s visible area title brief description of what the form will do sections collapsible sections to group related inputs inputs right aligned labels and input fields user should be able to tab between fields to facilitate entries for expert users instructions optional include brief instruction text only if deemed necessary given the context of the form scrollbar appears if form still cannot be fully seen once dialog has expanded to hit bottom of browser s visible area call to action buttons primary action to the right with possible secondary actions to the left of it cancel button to the left focus should be on the primary button enabled once all required inputs have been selected for detailed visual design see form interaction design the form dialog is semi modal because the application bar is still accessible this allows the user to temporarily interrupt their work in an unfinished form and open another screen into a new web browser tab if the user decides to simply navigate away without completing their form default behaviour the system will request confirmation from the user if they want to conserve their unfinished form and navigate to a new tab or lose their entries by default the primary action to apply the form should be in focus so that the user can directly hit the enter key if desired the exception to this rule is when the action is potentially destructive to something in the network or system e g edit a service in this case focus should be given to the cancel button standard keyboard tab navigation techniques should be available these follow the correct order of inputs all the way to the completion buttons form layout related inputs can be grouped into collapsible sections guided tutor sections some sections group related inputs to illustrate the form s workflow acting as a guided tutor these collapsible sections have titles displayed to the left of the input fields and can be manually collapsed expanded later sections may be collapsed disabled if they require the user to first enter earlier inputs once those inputs have been provided they expand automatically field group sections other sections simply group related fields for organization purposes within a tutor section display prompt text in input fields only when there is a possible ambiguity if the field is unambiguous based on the label no need to include prompt text see text units of measure are displayed after the value to which they apply note that in a table where data is displayed they would appear in a column header to avoid unnecessary repetition for example revert in _ _ _ minutes excess loss _ _ _ db see text some complex forms allow users to add edit multiple objects within a single form for example when creating a service it may be possible to create n endpoints that each require a subform of inputs they will appear as collapsible panes with an add action button at the bottom for the user to continue to add another the pane titles allow for sufficient space to appropriately identify each separately added object forms are generally laid out in a single column to enforce an unambiguous linear workflow this has been shown to improve form completion rates in usability studies in specific cases form input fields make sense to layout side by side in a 2 column form for instance if supplying a and z endpoint inputs these attribute groupings may be laid out side by side to take advantage of horizontal real estate since they semantically make sense to place that way this is expected to be the exception not the rule validating input only valid options are available for fields with discrete inputs e g combo boxes check boxes these valid options update according to inputs made earlier in the form to avoid incompatible selections for example if the user has selected a 1ge rate for an endpoint subsequent selection of ports should only present ports that support the 1ge rate for fields which require free form user input inline validation should be performed immediately as the user types if an error is detected the input field is highlighted with a brief explanation appearing beneath the field to help the user correct their mistake this will shift the remaining form inputs downwards once they ve made the correction the highlighting disappears and the remaining inputs shift back to their original positions required input fields shall be visually marked so that the user knows what the minimum entries are they must provide as they are filled in the required indicator is remains call to action buttons are only enabled once all required fields have been entered note that fields that are technically required for an operation but that have default values selected in the form should not be marked as required if there are required fields within a collapsed tutor section this should be visually marked on the section itself " },
          { id:"create",
            alias:"Create",
            type:"route",
            route:"design-patterns.forms.create",
            keywords:"when to use creation forms are used to input parameters for new objects in the system they can be simple or complex depending on the object type an example of a simple creation form would be one to create a new user in the system or a drawn ne significantly more involved forms are required to specify the necessary attributes for network services interaction design users invoke a creation form from a web link in the ui e g from the application bar menu or a button link by default it opens on top of the current page i e within current route url the user can choose to use the web browser s capability to open the create link into a new tab as this is intended for expert web users this option is discoverable via the web browser s menu system off the create web link if opened into a new web browser tab the dialog is placed over a new object browser instance with keyword search open therefore if the user cancels or closes the progress dialog the user is left in the object browser as though they d opened it from the application bar menu the form completion button name should match the verb in the link used to invoke the form itself e g create user provision service users can clear all their inputs with the clear button this clears all their inputs in the form and resets it back to the way it was when first opened with appropriate defaults in place when creating more complex objects a semi modal progress indication dialog replaces the form upon completion it serves two purposes to indicate progress applicable error messages and to provide follow up navigation options immediately available even if the creation action has not yet completed 1 open the details of the newly created object view a list of the user s recently created modified objects including this one e g most recent 25 objects open a fresh form to create another object instance or close the progress dialog a detailed activity log is accessible to the user from the progress indicator dialog it should contain sufficient information to be useful in troubleshooting when an error is encountered while applying the creation edit " },
          { id:"edit",
            alias:"Edit",
            type:"route",
            route:"design-patterns.forms.edit",
            keywords:"when to use use this basic form pattern to change an object s editable attributes e g service s name customer or to input system or user settings e g security settings preferences if already viewing an object details screen a separate form is not required the object can be placed in an edit mode such that the user can edit the fields directly see inline editing described in the object details pattern interaction design the object edit form only displays the editable attributes of the selected object or objects generally this means that the form is quite short by comparison with creation forms also a smaller subset of attributes make sense to edit on multiple objects at a time for example it does not make sense to allow name to be edited on multiple services at once but it may make sense to edit the customer field on several at a time provide indeterminate progress indication and completion notification asynchronously to users in addition asynchronous transient notifications let the user know the outcome of the operation in a non modal way for more on progress indication see the user feedback pattern description place progress indicators in proximity to selected objects to allow users to easily monitor task completion " } ] },
      { id:"global-search",
        alias:"Global Search",
        type:"route",
        route:"design-patterns.global-search",
        keywords:"when to use the global search will always be available from the application bar the application bar will be the only constant on every page within blue planet the global search will give the user the freedom to search on anything they want very similar to a google search where a user can search on a specific word and see what is returned but also allowing the user to be more specific ux ui components global search icon global search text field allows user to type in keywords to search the database for keyword search signifying the parameters from the global search text field results set displayed in small view by default facets to further filter the results returned by the global search ux interaction when a user clicks on the search icon in the application bar a text field will appear for the user to type their search keywords once a user hits the enter key results will replace the contents on the current page and be returned in the form of a list browser the list browser will provide specific information based on the data object types returned by the search the keywords used in the search will appear in the keyword text field in the center of the info bar on the results page the user will have the ability to reset the global search at any time by clearing and entering a new keyword search from the list browser or by accessing the global search from the application bar " },
      { id:"home-page",
        alias:"Home Page",
        type:"category",
        route:"design-patterns.home-page",
        items:[ { id:"sample-layouts",
            alias:"Sample Layouts",
            type:"route",
            route:"design-patterns.home-page.sample-layouts",
            keywords:"blue planet blue planet sample layouts rr created by christiane campbell last modified by sonya thornley on jan 28 2016 below is a set of sample layouts for the home page document generated by confluence on feb 25 2016 11 36 atlassian " } ] },
      { id:"info-bar",
        alias:"Info Bar",
        type:"route",
        route:"design-patterns.info-bar",
        keywords:"coming soon " },
      { id:"login-logout",
        alias:"Login Logout",
        type:"route",
        route:"design-patterns.login-logout",
        keywords:"coming soon " },
      { id:"notifications",
        alias:"Notifications",
        type:"route",
        route:"design-patterns.notifications",
        keywords:"coming soon " },
      { id:"object-browser",
        alias:"Object Browser",
        type:"category",
        route:"design-patterns.object-browser",
        items:[ { id:"overview",
            alias:"Overview",
            type:"route",
            route:"design-patterns.object-browser.overview",
            keywords:"when to use when users need to retrieve display act upon or edit sets of similar objects they do so via an object browser main tasks retrieve a set of objects based on a set of criteria view the set of objects and a subset of their attributes sort the set of objects by one or more of their attributes filter the object instances so what is displayed is a reduced set of the original scope select one or more object instances from the displayed set view attribute details for a specific object instance edit an object s attributes perform simple actions on an object e g acknowledge alarms run a test lock delete clear open additional tools screens dialogs etc to perform complex tasks on the selected object for example related objects more detailed views relationships higher or lower layer associations additional metrics etc there are two main formats of object browsers a list format see list object browser rr a table format see table object browser rr determine which to use based on the object type and the main usage scenarios for these objects the when to use sections for each browser type describe what you should consider in order to choose the most suitable format ux ui components info bar includes objects list context description list counts and optional summary information for the objects in the list keyword search box sets the initial context of the browser based on supplied keyword s app level actions optional non contextual actions the user can take related to this object type filter pane displays all available filters to further refine the set collapsible by the user sort controls multiple attribute sort on attributes of objects in the list retrieved results list of results displayed with primary secondary tertiary attributes organized into swim lanes within each row most important information is highlighted and located in leftmost rightmost swim lanes to facilitate scanning in the list accommodates differences between displayed data for different rows in the table action controls applicable actions bar shifts up into the view upon selection of one or more rows in the list actions determined and enabled disabled based on selections interaction design opening the object browser nms users are typically very task focused and searching for something in particular rather than browsing through everything so even before opening an object browser the user typically knows something about the objects for which they are searching filtering is also a critical interaction pattern intended to help users narrow their results to find a specific object quickly or a set of objects relevant to the task at hand users will be able to open an object browser thus setting its context by opening the object browser from another object s context e g open list of services from a link in the map loading objects related to a set of other objects e g select ne2 ne3 ne5 ne7 and load equipment for them setting search criteria to focus in on a specific part of the overall search universe or deliberately choosing to avoid setting limiting criteria in order to view all users can further refine the list by applying filters once the result set is loaded the user is prompted to enter keyword s as starting context for their object browser on the assumption that users are not usually interested in everything this will search across multiple string based attributes of the object type e g service name service endpoint users can specify more than one search term separated by spaces which will be and ed together users can hit search without providing any keyword this will result in the object browser being opened in the context of the full set of possible results the current keyword search applied to the object browser should be prominently displayed in the info bar the user can change the starting context by searching again from the info bar this resets any applied filters in the list results are displayed in the default sort order for the object browser sort must be reflected in the sort controls an object browser can be opened from the context of another object for example opening the equipment list from the context of a particular ne on the map or in a service view the applied context must clearly be displayed users can further narrow the result set by filtering based on attributes relevant for the current result set these filters appear in the object browser s filter pane for details on how filtering works see filtering rr match the web browser tab s title to the main title in the infobar this will be the most effective way to differentiate the tab when many are opened sorting nms users sort objects as a technique to group like objects together in a chunk organize the results in an order of priority e g critical alarms first most recent alarms down services first an external sort control is available above an object browser s result set see control description at sort it displays both the default sort and allows the user to change the sortable attribute order users can also add more sort criteria that are displayed in the order in which they are applied sortable attributes are presented in a defined order to help the user find what they re looking for for example in alphabetical order default or most common sort criteria at top if known in table object browsers column headers can also be used to apply the same capability when used the applied sort should also be reflected next to the sort control in addition to in the table columns multi column sort is applicable by applying a modifier key when clicking on the next column ctrl add visual to help explain sort across the entire result set that is in scope of the object browser based on its current context applied filter this will match the user s mental model of how the sort should work maintain the current sort order even when the results change due to updated filters or dynamic changes from the server network e g addition removal updating of results the user can select any attribute in the results to apply an ascending descending sort order on demand the list of offered attributes shall include all attributes including those that may only apply to certain rows in a heterogeneous result set similar to the presented filters the list of sortable attributes should be reduced to match the currently applied filters on the object browser applying a filter that removes a sortable attribute that is currently part of the applied sort should not change the results multiple attributes can be chained in order to apply a hierarchical sort on the results the 2nd level of sort for the 2nd selected attribute will be applied within the groups created by the first level of sort apply a default sort when object browsers are first opened the current applied sort must be explicitly shown to the user with the same sort controls they can adjust manually the appropriate default sort for a list should be determined on a case by case basis based on the object type and the main user tasks involved in order to avoid unnecessary user action to manually re sort the list for example alarms are normally sorted on raise time whereas services are sorted by service name sort each attribute consistently independent of the object browser sort according to the ordinality and cardinality of the data for example date time oldest to most recent equipment identifiers e g ports parse and sort these fields according to their format for example 1 9 2 before 1 10 3 in ascending order note alphanumeric sort would place it before because 1 lt 9 endpoints combination of alphanumeric sort on network element name and then sort by equipment identifiers severity critical major minor warning info state down troubled normal keep user s selection in view while sorting if multiple objects are selected always keep the first one in view no visible paging no paging controls are visible to the user as the user scrolls through an object browser implicit paging is performed behind the scenes in this way users should perceive a seamless scroll as the results are retrieved made visible on the screen as the user scrolls they should not perceive a time delay as new results are retrieved and made visible on their screen page sizes should be determined to optimize this perceived performance the scrollbar must always reflect relative position within entire result set not within page this way the user always has a sense of where they are in the total result set with which they re working if the user jumps to another section of the result set by clicking directly in the scrollbar e g far down the list display an indeterminate progress indicator in the browser results window while the appropriate page is retrieved see progress indicators dynamic updates all changes are automatically reflected in the object browser this way users have access to the latest state of the network at all times possible changes are insertions of objects because they are new to the system or now match the browser s filter updates to existing objects in the browser such state changes acknowledgements removal of objects because they have been deleted from the system or no longer match the browser s filter visually mark all changed inserted objects this way users can identify changes even if they originally happened outside the visible area of the browser unmark them when the user selects them vd req d propose to use the vertical bar to the left of the rows to indicate this status summarize changes to the result set since the user last searched filtered or opened the browser if opened from context count the changes since the contents were last set and display it in a badge next to the list totals animate changes to the badge to draw the user s eye viewing change details click on the badge icon to view the corresponding change list sorted by time with the most recent at the top this displays a log of the last 100 changes insertions updates removals since the user last set the list s context by filtering searching or first opening the list from some other context note if there were multiple changes to the same object they can all be listed separately this sequence of events is sometimes valuable to the user if there are more than x items in the change list introduce a scrollbar keep the change list open until the user explicitly closes it if new items come in while the change list is open update the badge count and visually indicate the count of new items in the change list itself users can click this to pull them in vd req d instead of being anchored to the badge it could slide in from the right in a panel size of x should be defined by vd clicking a change list record auto scrolls the browser to the affected object this avoids users having to manually hunt for the object of course no link is possible for removal logs after closing the change list the badge icon count is cleared an icon remains for the user to click in order to re open the change log if needed changing search context e g keyword search or applied filters resets the change list to zero leave previously marked items as is freezing contents temporarily we can classify object browsers into one of two major types slow changing browsers that contain relatively static objects examples network elements equipment services and infrastructure streaming browsers that contain rapidly changing data examples alarms events users can freeze the contents of streaming browsers due to the nature of streaming data automatic changes may be very disruptive to a user s flow if they are focusing on data that is in view although this functionality can be provided for slow changing browsers as well it s of reduced value to users when the content is frozen there is no need to keep track display any changes but show how long it s been frozen e g for last 12 minutes however the fact that it is now a static view must be unambiguously indicated to the user vd req d contextual actions object browsers follow a basic object select action workflow upon selection of a row in an object browser relevant actions for that object will appear in an actions panel at the bottom of the list actions are visually differentiated based on their expected importance in the user s workflow the visual language supports the concept of primary secondary and tertiary actions some action buttons can be launched into new web browser tabs windows for example button styled web links replace the current page by default but always offer the ability to open into a new web browser tab or window visual affordance distinguishes these actions see web links aka hyperlinks ip users may select multiple objects in the list in this case the available actions in the actions panel will be limited to actions that can be performed on multiple objects at a time in addition the set of actions will be limited to only those that apply to all selected actions viewing comparing specific object details for a small set of objects will be accommodated with special purpose actions optimized for the user scenario the number of selected items is reflected in the action bar to reinforce how many will be affected by the chosen action double click to open the selected object s details page this is the primary action of the object browser " },
          { id:"list",
            alias:"List",
            type:"route",
            route:"design-patterns.object-browser.list",
            keywords:"when to use use a list view object browser when when the instances do not all have the same attribute data or the attributes vary and when the object instances are of a similar general type but have various subtypes for example the alarm browser contains alarms with different attributes depending on their type e g ne alarms ems nms alarms tca alarms the services browser contains services of different types that each may have some distinct relevant attributes ux ui components info bar includes title list context description list counts and optional summary information for the objects in the list keyword search box sets the initial context of the browser based on supplied keyword s app level actions optional non contextual actions the user can take related to this object type filter pane displays all available filters to further refine the set collapsible by the user sort controls multiple attribute sort on attributes of objects in the list retrieved results list of results displayed in list cards where primary secondary tertiary attributes organized into swim lanes within each row most important information is highlighted and located in leftmost rightmost swim lanes to facilitate scanning in the list accommodates differences between displayed data for different rows in the table view controls small medium large toggle between different views to balance between displaying more object detail per row vs more objects in the visible area action controls applicable actions bar shifts up into the view upon selection of one or more rows in the list actions determined and enabled disabled based on selections interaction design the list browser inherits all behaviours described in the generic object browser overview rr pattern changing views users can change the level of detail displayed in the object browser by selecting small terse or large full views of the objects these options are located to the top right above the result list these views show increasing amounts of data about the objects in the list while trading off the number of rows that can be displayed at one time the small view focuses on primary information to view more rows in the visible area see list cards the large view expands to show primary secondary and tertiary information about an object that users may need when performing more detailed tasks with a set of objects in the list again without having to open individual object details pogo sticking see list cards note all two views may not apply to all object types such that there maybe only be 1 size of view the applicability of each view should be determined on a case by case basis " },
          { id:"table",
            alias:"Table",
            type:"route",
            route:"design-patterns.object-browser.table",
            keywords:"when to use use a table view object browser when the instances all share the same attributes no blank columns the columns can be accommodated in a single screen width and comparison of data between rows is a primary use case closer visual proximity of comparable data such as numbers down a list ui ux components info bar includes title list counts and optional summary information for the objects in the list keyword search box sets the initial context of the browser based on supplied keyword s app level actions button optional location of non contextual actions the user can take related to this object type filter pane describes the list s context and displays all available filters to further refine the set collapsible by the user sort controls multiple attribute sort on attributes of objects in the list retrieved results list of results with each attribute displayed in a separate column the user should be able to re order adjust the width and show hide columns action controls applicable actions bar shifts up into the view upon selection of one or more rows in the list actions determined and enabled disabled based on selections interaction design all behaviours described in the generic object browser overview rr pattern apply to the table version column headers can also be used to apply multi attribute sorting on the list the applied sort should be reflected via the sort control above the list as well as in the table columns multi column sort is applicable by applying a modifier key when clicking on the next column ctrl add visual to help explain including numbering of sort and order indication " } ] },
      { id:"object-details",
        alias:"Object Details",
        type:"route",
        route:"design-patterns.object-details",
        keywords:"blue planet blue planet object details overview rr created by christiane campbell last modified on feb 23 2016 when to use an object details page packages together all details about an object in a full page of real estate it helps users understand the object troubleshoot it perform actions edit and check out related information to the object when a user chooses to drill into a specific object they re focused on that object for object specific work capturing an object s details in a separate page allows users to use multiple screens or browser tabs keeping this information separate from other tasks they are performing most objects in the system are expected to have a corresponding object details page unless they are so simple that all details can be conveyed effectively in an object browser ux ui components info bar includes a clear identifier of the object plus other key attributes e g state type action buttons object specific actions see the info bar pattern object view canvas canvas to view the object s details there may be several alternate views the primary view is seen upon opening the page if applicable the view canvas can be further subdivided such that secondary information can be displayed through progressive disclosure and selection of what is seen in the primary view e g service map and service line views ne shelf level view and selected card graphical view view selector ui component to display and select alternate available object views this gives the user the ability to switch between different views of the object such as a graphical view a list of parameters for the object notes change logs etc related info applications quick links to important related data in context of the object opens into slide out panel on top of the object view a brief visual summary may be associated to the link the attached video illustrates an interaction design for switching between the alternate view selector and opening related info applications a href download attachments 171228128 detailview mov version 2 amp modificationdate 1453144473160 amp api v2 class confluence embedded file detailview mov interaction design opening object details users navigate to object details pages in multiple ways including from an object browser global search results and even from direct context of another object match the web browser tab s title to the identifier title in the infobar this will be the most effective way to differentiate the tab when many are opened object details are opened into a new web browser tab allowing the user to continue with the previous page in parallel when navigating from an object browser it s very likely that users will want to conserve the list that they ve gone through pains to search filter sort in order to come back to it as part of their overall work this also corresponds to how typical nms tasks are performed today where viewing details of an object maintains the original list users can also open many object details pages at once each into separate web browser tabs this avoids pogo sticking back and forth between the object browser and various object details pages when needing to view certain details across a subset of objects the page parking interaction method effectively allows users to navigate amongst details without losing sight of their original list context opening new object detail tabs will follow the web browser s conventions since most browsers allow some form of user customization to determine new tab placement and focus blue planet will folllow these conventions display key object summaries attributes in the info bar directly beneath the object identifier this way the overall object s context is always in view even when viewing data in related info links specific object data shown here will typically overlap with the primary secondary attributes visible in a list object browser s small view for example an ne s key details may include alarm counts ne type version ip address mac address number of shelves all data displayed summarized in object details pages is dynamically updated this way the user will learn that they reliably reflect the latest state of the object at all times object views display the primary view of the object in the primary view canvas upon opening as much as possible this should be a graphical view of the object that aims to help the user quickly understand it the right graphics can convey a lot of meaning quickly as opposed to having the user parse through text and mentally assemble the object for example a service s primary view may be a map of the service with accompanying subway line view whereas the full set of service parameters may be an alternate view offer more than one view for an object that may be necessary to perform different user tasks users may alternate between these views as needed from the primary view canvas using the view selector for example an alarm detail might display the fields values of the full record by default but also offer a graphical span view or affected network view for the user to better troubleshoot the alarm other example alternate views could be things such as user notes change histories see the object detail meta type patterns for descriptions of suggested views for different object types connections equipment events alarms profiles accounts users can open alternate views into a new web browser tab window therefore these buttons must behave as web links such that the user can invoke the web browser s menu for hyperlinks make all object parameters consistently accessible as an alternate view of the object typically there are more object attributes than can fit in the infobar for example key attributes for a service may include state reason service type client rate protection type and customer however many more attributes describe the service in full detail including all attributes applied to provision the service in the first place this diagram shows a fairly basic example of a mesh restorable control plane service s attribute details users can set an object into edit mode to edit attributes inline of its object details this can either be accessed directly from the parameter view edit button or from the actions buttons which opens the parameter view in edit mode the subset of fields that can be edited become editable once happy with the changes the user explicitly saves save changes which simultaneously exits the edit mode in this case no separate dialog is opened and edits can be seen in context of the wider object details lt see user feedback for when to use confirmation dialog for put the stuff from the connection meta type into the overview pattern since it applies to all object types progress indication next to the button if successful goes away and edit button re enabled other users or this user in another tab looking at the same object see the same thing if it fails notification to user see notification pattern values go back to what they are actually in the network lt need guideline to figure out what falls into this category of simple edits vs deeper multi ne changes e g regroom gt any object may have a notes view to view add notes against the object see the notes ip pattern for a more detailed description some object views allow the user to progressively disclose drill in more detailed specifics about a relevant part of the overall object for example the primary view of a service is a map of the service s nes and links but users can drill in to a more detailed view of a path of the service this secondary view is optional see the object detail meta type patterns for descriptions where secondary views are applicable secondary views are drawn based on what is selected in the primary view changing the selection in the primary view therefore entirely changes the contents of the secondary view for example if the user selects a path in the service map the corresponding subway line view appears as a secondary view note that it may not always make sense to auto select something in the primary view to populate the secondary view for example in an ne shelf level view there is no particular object that makes sense to select by default in which case instruction text can always be displayed in its stead to help users discover the interface e g click card for larger view graphical views are interactive and reflect any changes dynamically users can select objects represented within a view in order to interact with them their key information is displayed in a selection details pod accompanied by a set of contextual actions that are relevant from this context generally this will include an identifier of the selected object its type state key attributes key actions and a link to open its own corresponding object details page the most recently selected item is represented in the selection details pod if no selection has been made the selection details pod may not even be visible or it may be visible with simple instruction text to help the user discover the interface e g click an object to view details accessing the object s related information users can access relevant related information on the object via quick links these provide value add correlations between the object in view and other related items in the system to support different user tasks for example when viewing a service related information may include its alarms other services that depend on it other services infrastructure that it depends on performance data historical tests etc generally these links could be to any operationally useful drill across query to related items in the db which may evolve with customer demand these related info buttons are always visible from the object details view if brief summary data can be helpful to the user consider including some data as information scent of the related data for example alarms can be summarized using the traditional alarm count color roll up when clicked a panel slides out over the object view canvas to display the related information update the info bar to include a title for the displayed content and a navigation button to return to the main view canvas this picture illustrates the intent not final visual design users can also open these related information panels into a new web browser tab window note that related information opened into a new web browser tab behaves as if the user had literally torn off this content to temporarily view side by side with other content users can click on other available related information without first going back to the main object details screen the other related information is listed and available in view to open directly attachments image2015 12 16 13 38 38 png image png image2015 12 22 16 10 54 png image png image2015 12 22 16 54 7 png image png image2015 12 22 16 57 15 png image png image2016 1 5 10 35 16 png image png image2016 1 5 10 35 51 png image png image2016 1 5 10 37 4 png image png image2016 1 5 11 37 41 png image png image2016 1 5 11 46 29 png image png image2016 1 6 11 29 24 png image png image2016 1 6 11 33 8 png image png image2016 1 6 11 34 47 png image png image2016 1 6 13 44 25 png image png image2016 1 6 13 52 56 png image png image2016 1 12 16 48 46 png image png image2016 1 12 16 53 4 png image png image2016 1 12 16 58 33 png image png image2016 1 12 17 10 29 png image png image2016 1 13 10 57 0 png image png image2016 1 13 11 3 44 png image png image2016 1 13 11 9 26 png image png image2016 1 13 11 9 38 png image png image2016 1 13 11 10 2 png image png image2016 1 18 10 34 49 png image png detail _view mov video quicktime detail _view mov video quicktime image2016 2 1 10 13 41 png image png image2016 2 1 13 4 14 png image png image2016 2 1 13 6 30 png image png image2016 2 23 13 0 11 png image png document generated by confluence on feb 25 2016 11 36 atlassian " },
      { id:"user-feedback",
        alias:"User Feedback",
        type:"category",
        route:"design-patterns.user-feedback",
        items:[ { id:"confirmation-dialog",
            alias:"Confirmation Dialog",
            type:"route",
            route:"design-patterns.user-feedback.confirmation-dialog",
            keywords:"blue planet blue planet confirmation dialog rr created by katherine parmeson last modified on feb 23 2016 when to use whenever a user is performing a potentially destructive action or when the action is time consuming to reverse different levels of confirmation are available for delete and edit functions based on the results of the action for example anytime the user action will cause a service to be reprovisioned or deleted 5 levels of delete each requiring a different form of confirmation simple delete no confirmation necessary non destructive easy to replace example deleting a zoom level bookmark in a network topology minimal validation simple confirmation necessary destructive but non traffic affecting example deleting a user account multiple object delete will not be available for end users maybe something to consider for qa or noc strong validation force user to think before they commit to the action highly destructive unable to recover no undo example deleting a domain deletes all resources in that domain 2 stage delete object information is archived instead of deleted silent archive when a user deletes an network element they are not notified of the archival but upon recreation the historical data is re instated a network element is the only object we will perform a silent archive all other objects will be deleted completely 3 levels of edit each requiring a different form of confirmation simple edit no confirmation necessary non destructive easy to change example updating the description owner or customer for a service minimal validation simple confirmation necessary potential of being destructive traffic affecting examples changing certain provisioning parameters requiring user to reprovision the service regrooming setting a manual switch resetting pm counters reseating cards setting equipment to out of service multiple edit simple confirmation necessary example admin state owner customer provisioning state ui ux components confirmation dialog 550px wide and appear at a fixed position 80px from the top of the browser s visible area centered horizontally title brief but specific text informing the user exactly what will happen verification as required extra information a user may be required to enter to continue with the potentially destructive action call to action buttons primary action to the right with cancel button to the left since the action can be destructive the focus will be on the cancel button multiple object summary list the objects that are to see visual design click here ux interaction when a user has initiated an action that requires confirmation to continue they will be presented with a confirmation dialog set to the appropriate level of validation based on the action they have initiated once the dialog has opened the user will have two options cancel the action or proceed because of the possible destructive nature of these changes the cancel button will have focus this will guard against the user automatically hitting the enter key without reading the dialog to prevent accidental confirmation attachments ux conf ex confirmation png image png ux conf ex simple delete png image png screen shot 2016 01 25 at 11 47 37 am png image png conf dialog strength png image png conf dialog strength png image png conf dialog strength png image png conf dialog strength png image png conf dialog strength png image png document generated by confluence on feb 25 2016 11 36 atlassian " },
          { id:"notifications",
            alias:"Notifications",
            type:"route",
            route:"design-patterns.user-feedback.notifications",
            keywords:"blue planet blue planet notifications rr created by christiane campbell last modified by katherine parmeson on feb 23 2016 when to use several notification patterns are used in blue planet depending on the context and type of notification the user needs in order to allow for a more immersive task focused experience the amount of in your face notification should be kept to a minimum the preferred method for notifications is in context with what the user is actively working on if there is a chance notification on a page may be missed then there should be a secondary notification of which there are three methods available likewise if there is a reasonable expectation that the user will be able to see the in context notification do not use a secondary notification our goal is to provide feedback in context and not force users to take action on a notification when it is not necessary some actions initiated by the user may not provide a sufficient confirmation or failure indication within the page the user is on these should utilize the transient message for example changing a parameter on a service from a list browser may not be visible to the user if they are displaying the small data view the transient message will provide validation that the attribute was updated or failed to update instructional information can also be provided via a transient message some pages can take advantage of this format to show next steps or indicate an activity mode a user may be in for example in oneplanner the on page instructional text for dragging the columns to make groups could be better displayed in a transient message that can be dismissed by the user transient messages should also be used as a secondary notification to inform the user of failure even when there is an on page indicator if there is a reasonable chance that the user may miss the visible status on the page itself activities that run in the background may take longer than a minute or require a follow up action by the user should appear in the notification badge tray this will reduce the occurrence of interrupting the users workflow as they have likely moved on to another task most successful activities will provide an entry in the notification tray but will not increase the badge count an example of a successful action that will increase the badge count is when a report that has been running in the background and has completed successfully all failed background activities and those requiring follow up action by the user will increase the badge count and likewise appear in the tray error dialogs appear for important or critical errors that may block a users progress for example warning and confirmation dialogs appear when the user has requested a potentially destructive change sometimes they are aware of the destructive nature of the change and this provides them a way to back out of it with no harm done in other cases they may be unaware of the potential for damage in these cases the dialogs should describe the change and its potential impacts and give the user a choice to continue with the request or not status dialogs should appear during multi step processes that don t required interaction by the user at each step for example during provisioning and deprovisioning of services provisioning a service can fail at multiple points along the way it is important for the user to see the progress and at what point a failure has occurred notification format table col width 20 col width 20 col width 20 col width 20 col width 20 instant in context transient badge dialog network element enroll yes secondary on failure no no network element de enroll yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no network element upgrade yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no network element backup yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no network element restore yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no network element cut out remove endpoint yes secondary on failure no no network element cut in add endpoint yes secondary on failure no no service infrastructure provision yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray yes status dialog service infrastructure deprovision yes secondary on failure no yes status dialog service infrastructure edit actions from details simple edits yes secondary on failure no no service infrastructure edit from list browser simple edits yes yes no no service infrastructure actions from list browser yes yes no no user create yes secondary on failure no no user edit yes secondary on failure no no user delete yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no acknowledge clear alarm yes secondary on failure no no run report no no always increase badge count no run test yes no always increase badge count no profile manager yes secondary on failure no no reset card no secondary on failure no no other delete actions important yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no deleting a user session yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no tenant create yes secondary on failure no no tenant edit yes secondary on failure no no tenant delete yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no slat commands yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no network config setup dynamic lsp control plane yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no system admin configuration security server setup yes secondary on failure no no dialog based workflow yes secondary on failure success no increase in badge count show in tray failure increase badge count and in tray no informational message yes provisioning a service is a special case the application will start by providing a notification in the form of a dialog which will update the user with the status as it progresses if the user chooses to close the dialog they will be notified if a failure occurs with a transient message and an increase in badge count value if the user closes the transient message the badge count will decrease likewise if they open the notification tray the transient dialog will also close the user will not be required to dismiss the same failed notification twice if the provisioning succeeds after the user has closed the status dialog a message will appear in the notification tray but the badge count will not increase actions listed in italics have not yet been designed so may change notification patterns at that time ux ui components transient messages thin color coded bar informational success failure simple message providing enough information to give the user a good picture of the situation detail page link for the object of importance x to allow the user to clear the message badge and notification tray tray contains items the user may need to take action on the badge is the numeric representation of the number of failed important notifications that have been added since the tray was last opened clear all notifications in one step view the history of cleared notifications one week back detail page link for the object of importance notification dialogs dialog 550px wide and appear at a fixed position 80px from the top of the browser s visible area centered horizontally title brief but specific text informing the user exactly what will happen progress indicator if necessary based on context see progress indicators call to action buttons primary action to the right with cancel button to the left if the action can be destructive the focus will be on the cancel button interaction design transient messages if the process completes successfully the transient dialog will close itself after 5 seconds if the process fails the transient message should remain open until the user closes it informational dialogs may have a close option or remain open while a user is in a certain state mode transient messages may become stacked if the user does not close them transient messages should have a link to provide additional data for failed processes to view design specifications click here badge notifications the badge number will increase when a failure notification is ready for the user clicking the badge will show a list of any notifications not previously cleared by the user once the user has opened the notifications panel the badge on the app bar will go away assuming when opened a user will read all new notifications notifications will be sorted with the most recent event at the top of the list the user will be able to clear individual notifications or all at once the user will have the ability to view the history of all cleared notifications since these notifications require follow up by the user clicking on them will open the appropriate page in a new tab for the user to perform the appropriate action to view design specifications click here notification dialogs use for error confirmation and status dialogs begin the message with the name of the object being acted upon for an error dialog clearly state the nature of the error and how the user can correct it if appropriate provide a link for the user to quickly navigate to the object in error for a confirmation dialog clearly state the consequence if the action continues do not use the phrase are you sure for a destructive action the cancel button should have the focus and the destructive button should be clearly labeled with the action it will perform for a status dialog incorporate the appropriate percent complete notification indicator click here label button clearly with the action they will invoke refrain from using yes no and ok cancel labels to view confirmation design specification click here attachments image2015 11 27 10 51 13 png image png screen shot 2016 01 18 at 8 52 07 am png image png screen shot 2016 01 19 at 10 25 02 am png image png screen shot 2016 01 19 at 10 25 14 am png image png screen shot 2016 01 19 at 10 26 27 am png image png screen shot 2016 01 19 at 10 27 51 am png image png screen shot 2016 01 19 at 10 28 59 am png image png screen shot 2016 01 19 at 10 41 21 am png image png screen shot 2016 01 19 at 10 41 38 am png image png modal examples png image png screen shot 2016 01 22 at 2 37 05 pm png image png screen shot 2016 01 25 at 9 25 29 am png image png screen shot 2016 01 25 at 10 46 21 am png image png screen shot 2016 01 25 at 10 46 36 am png image png transient example png image png badge example png image png badge example png image png screen shot 2016 02 11 at 5 50 51 am png image png screen shot 2016 02 11 at 8 41 55 am png image png image001 png image png screen shot 2016 02 15 at 7 51 24 am png image png screen shot 2016 02 15 at 7 51 46 am png image png badge v2 png image png conf dialog strength png image png modal dialog conf v2 png image png transient v2 example png image png badge example png image png modal dialog conf v2 png image png badge v2 png image png document generated by confluence on feb 25 2016 11 36 atlassian " },
          { id:"progress-indicator",
            alias:"Progress Indicator",
            type:"route",
            route:"design-patterns.user-feedback.progress-indicator",
            keywords:"coming soon " } ] } ] },
  { id:"ui-components",
    alias:"UI Components",
    type:"category",
    route:"ui-components",
    items:[ { id:"button-controls",
        alias:"Button Controls",
        type:"category",
        route:"ui-components.button-controls",
        items:[ { id:"button",
            alias:"Button",
            type:"route",
            route:"ui-components.button-controls.button",
            keywords:"blue planet blue planet button vi created by brian choi last modified by sonya thornley on mar 04 2016 description there are different types of basic action button primary secondary and tertiary basic buttons can include icons see below on the specifications for primary secondary and tertiary buttons special buttons also have been defined for specific uses these special buttons behave like regular buttons except they have a special layout vi put in pictures of special buttons more action button in application bar and close button or we can picture them below or both behaviors don t use an action button to indicate a state label or progress such as on or off pending uploading see text for labels selecting a button will result in different actions that include a new page being displayed in the existing tab or a new tab a dialog being displayed or closed a command pop out menu being displayed an immediate action being performed usage guideline buttons are used to perform an action don t use all capital text instead use sentence case capitalization see capitalization for guidelines buttons should use a verb or verb phrase see terminologyfor guidelines the text should describe the action the button performs e g save close cancel enroll etc in the event where the button acts on a single setting name the button as a specifically as possible add address for example put more emphasis on what the immediate action is versus just using the word add avoid using extremely long text if possible see text for guidelines basic primary button a primary button is used when there is a primary action in a screen used as the primary action in forms list dialogs only one primary action allowed per screen form list dialog there might not be a primary action a primary button should always be at the bottom right of a form browser window and or any other dialog the primary action is the one action that a user will inevitably want to perform in the page basic secondary button a secondary button is used when there are secondary action s in a screen used for secondary execution in forms list dialogs may have multiple secondary buttons on the ui screen there may not be secondary actions a secondary button should always be to the left of a primary button a secondary button should be used to perform an action that is important for the workflow basic tertiary button a tertiary button is used when there are tertiary actions s in a screen label can be combined with related icon to show actions icons must always be placed before the text label all close and cancel are tertiary buttons may have multiple tertiary button on the ui screen there may not be tertiary actions when combined with secondary and primary buttons a tertiary button should always be placed to the left placement of buttons example of placement of buttons the primary button is always on the far right the secondary is always to the left of the primary if any and the tertiary is always to the left of the secondary button if any special buttons special buttons can be displayed according to the use of the button but don t comply to the rules for basic buttons each has a specific intended use icon without a border and without text these icons are intended to be used to launch a command pop up menu the icon represents that it is menu that will be launched vi picture icon with a circular border and without text these icons are intended to be used as a close on dialogs vi picture icon with text below the icon these buttons are intended to be used on the application bar where space is limited there is an icon that represents the action if applicable one word of text or two stacked words of text these buttons try to be more square to take up the height of the application bar vi picture icon with text to the right of it but the color is not the standard color this button is the navigation menu button it launches the navigation menu panel as defined in the navigation menu component this menu is the same color of the navigation menu and has a different focus and selection color from basic buttons vi picture visual specification use specified spacing rules to ensure buttons can be clicked easily in events where the button can lead to a destructive action such as delete place it far enough away from a safe button so that it avoids accidental clicks by the user the width of the button should be determined by the width of the text with a minimal 10px padding on each side bigger the taller the button the larger the font size the characters count for button in english should be less than 16 there are three different button sizes small medium and large small buttons should be used within forms such as in line actions medium buttons should be used in small to medium size dialogs large buttons should be used in full page browsers vi need the specifications of the special buttons attachments image2015 12 3 13 32 54 png image png image2015 12 3 13 33 17 png image png image2015 12 3 13 33 39 png image png image2015 12 3 13 34 5 png image png image2015 12 3 13 34 21 png image png image2015 12 3 13 34 57 png image png image2015 12 9 16 21 43 png image png image2015 12 9 17 25 12 png image png image2015 12 9 17 25 41 png image png image2015 12 10 8 37 27 png image png image2015 12 10 8 40 10 png image png button types png image png button types2 png image png image2015 12 10 12 10 56 png image png image2015 12 10 12 11 14 png image png image2015 12 10 12 11 37 png image png image2015 12 10 14 40 32 png image png image2015 12 10 15 3 48 png image png button types3 png image png image2016 1 11 14 17 45 png image png image2016 1 11 14 25 33 png image png image2016 1 27 13 14 12 png image png image2016 2 3 11 40 0 png image png image2016 2 3 11 40 57 png image png image2016 2 3 13 12 38 png image png image2016 2 10 10 56 0 png image png image2016 2 10 10 56 43 png image png image2016 2 25 11 32 10 png image png document generated by confluence on mar 07 2016 12 06 atlassian ",
            items:[ { id:"min",
                alias:"First",
                type:"route",
                route:"link.min" } ] },
          { id:"link",
            alias:"Link",
            type:"route",
            route:"ui-components.button-controls.link",
            keywords:"coming soon ",
            items:[ { id:"min",
                alias:"First",
                type:"route",
                route:"ui-components.button-controls.link.min" },
              { id:"first",
                alias:"First",
                type:"route",
                route:"ui-components.button-controls.link.min",
                path:{ path:"ui-components/button-controls/link/first/:first_id" },
                items:[ { id:"second",
                    alias:"Second",
                    type:"route",
                    path:{ path:"ui-components/button-controls/link/second/:second_id" },
                    route:"ui-components.button-controls.link.first.second" } ] } ] },
          { id:"checkbox",
            alias:"Checkbox",
            type:"route",
            route:"ui-components.button-controls.checkbox",
            keywords:"summary checkboxes are used for multi selection and to describe a state action or value behaviors selecting and deselecting the checkbox will display the checkmark or hide the checkmark usage guidelines a checkbox is used to choose between two opposite states actions or values a group of checkboxes together allows a user to choose multiple values if you need to provide a set a choices from which a user can choose only one option use radio buttons radio button there are two labels for a checkbox a group label and the individual checkbox labels a checkbox label needs to be clear what is the state action or value being displayed it should be clear to the user of what happens when the option is selected or deselected always place the checkbox label to the right of the check box group label placement depends if horizontal or vertical if the checkboxes are placed vertically then the group label is above if the checkboxes are placed horizontally then the group label is above or to the left the arrangement of checkboxes horizontal or vertical should be determined on a case by case basis depending on what is being designed the number of checkboxes in a group should be determined by what is being designed alternatives to a checkbox is a multiple selection combo box see text for the group label and the labels for each check box visual specification specification when used on top of each other with small checkbox and with text specification when in one row ",
            items:[ { id:"min",
                alias:"First",
                type:"route",
                route:"link.min" } ] },
          { id:"checkbox-group",
            alias:"Checkbox Group",
            type:"route",
            route:"ui-components.button-controls.checkbox-group",
            keywords:"coming soon " },
          { id:"help-button",
            alias:"Help Button",
            type:"route",
            route:"ui-components.button-controls.help-button",
            keywords:"coming soon " },
          { id:"radio-button",
            alias:"Radio Button",
            type:"route",
            route:"ui-components.button-controls.radio-button",
            keywords:"coming soon " },
          { id:"radio-button-group",
            alias:"Radio Button Group",
            type:"route",
            route:"ui-components.button-controls.radio-button-group",
            keywords:"coming soon " },
          { id:"toggle",
            alias:"Toggle",
            type:"route",
            route:"ui-components.button-controls.toggle",
            keywords:"coming soon " } ] },
      { id:"menu-controls",
        alias:"Menu Controls",
        type:"category",
        route:"ui-components.menu-controls",
        items:[ { id:"navigation",
            alias:"Navigation",
            type:"route",
            route:"ui-components.menu-controls.navigation",
            keywords:"coming soon ",
            items:[ { id:"resource",
                alias:"Resource",
                type:"route",
                route:"ui-components.menu-controls.navigation.resource" },
              { id:"dashboard",
                alias:"Dashboard",
                type:"route",
                route:"ui-components.menu-controls.navigation.dashboard" } ],
            modals:[ { modalName:"frost-navigation-modal",
                modal:{ withParams:"fiberplantNav",
                  otherParams:{ fiberplantNavTemplate:"navigationTemplate" },
                  dialogClass:"frost-navigation-modal",
                  actions:{ openRoute:"openRoute" } } },
              { modalName:"frost-navigation-modal",
                modal:{ withParams:"adminNav",
                  otherParams:{ fiberplantNavTemplate:"navigationTemplate" },
                  dialogClass:"frost-navigation-modal",
                  actions:{ openRoute:"openRoute" } } } ] },
          { id:"command-menu",
            alias:"Command Menu",
            type:"route",
            route:"ui-components.menu-controls.command-menu",
            keywords:"coming soon " },
          { id:"context-menu",
            alias:"Context Menu",
            type:"route",
            route:"ui-components.menu-controls.context-menu",
            keywords:"coming soon " },
          { id:"disclosure-tab",
            alias:"Disclosure Tab",
            type:"route",
            route:"ui-components.menu-controls.disclosure-tab",
            keywords:"coming soon " } ] },
      { id:"indicator-controls",
        alias:"Indicator Controls",
        type:"category",
        route:"ui-components.indicator-controls",
        items:[ { id:"notifications",
            alias:"Notifications",
            type:"route",
            route:"ui-components.indicator-controls.notifications",
            keywords:"coming soon " },
          { id:"badges",
            alias:"Badges",
            type:"route",
            route:"ui-components.indicator-controls.badges",
            keywords:"blue planet blue planet badges ip created by philippe savignac last modified by katherine parmeson on mar 03 2016 description badge is an indicator that there is information available pertaining to where the badge is displayed and the number of objects associated with it behaviors displays a count up to 99 blue badge is only visible when there is at least one item to be viewed by the user clicking on the badge will display the items indicated by the badge number in some instances that will clear the badge in others the badge and count will remain visible usage guidelines use a badge when you are indicating a count of something that is hidden from the user there are currently two use cases for badges showing a success failure notification from a process the user initiated showing the number of filters set in a list browser visual specification attachments image2016 2 4 10 30 40 png image png screen shot 2016 03 03 at 9 27 46 am png image png image2016 3 3 12 33 10 png image png image2016 3 3 12 34 6 png image png image2016 3 3 12 36 32 png image png image2016 3 3 12 37 11 png image png document generated by confluence on mar 07 2016 12 06 atlassian " },
          { id:"progress-indicators",
            alias:"Progress Indicators",
            type:"route",
            route:"ui-components.indicator-controls.progress-indicators",
            keywords:"blue planet blue planet progress indicators ip created by christiane campbell last modified by katherine parmeson on mar 04 2016 description this is used to show the user when an action they initiated is in progress it will continue as long as the process is doing something behaviors a progress indicator should be used on the area or object where the processing was initiated from it should only take up the whole page if it requires whole page re render a progress indicator will be controlled by the application a user will not interact with it it will appear and disappear based on the processing life of an action initiated by the user usage guidelines there are two types of progress indicators looped and percentage complete these progress indicators should only be used on content that will take more than 2 seconds to complete showing it for a shorter time can appear as a flash which will increase mental strain looped indicators should be used when it takes an indeterminate amount of time to complete a process percentage complete indicators will be used when some amount of information about where a user is in the whole process is known there are different forms of a percentage complete indicator based on the type of data known for example how many files left to process which step in a 5 step process is active visual specification a href download attachments 171226222 iloadingring svg version 1 amp modificationdate 1452024801167 amp api v2 class confluence embedded file iloadingring svg determinate indicators attachments i loading ring svg image svg xml image2016 1 6 13 47 26 png image png image2016 1 6 13 47 47 png image png ring gif image gif document generated by confluence on mar 07 2016 12 06 atlassian " },
          { id:"transient-messages",
            alias:"Transient Messages",
            type:"route",
            route:"ui-components.indicator-controls.transient-messages",
            keywords:"blue planet blue planet transient messages ip created by philippe savignac last modified by katherine parmeson on mar 04 2016 description transient messages will provide minimally invasive messages to a user these message can remain open for 5 seconds or more or be closed by the user the text of the message may provide success failure information or instructional information behaviors a transient message will animate by sliding down from the bottom of the app bar messages that indicate a successful state will close on their own after 5 seconds if the user has not already closed them messages that indicate a failure state will remain open until the user manually closes them messages that provide instructional information will remain open while the user is in that state or until the user closes them transient messages can continue onto 2 lines but it is important that the text be as succinct as possible can contain a link to more detail will appear in the middle of the screen just below the app bar usage guidelines there are three use cases for transient messages in the situation of a failure when the user may not receive or may easily miss an indication through the interface in the list browser when a user edits a record depending on the level of visible detail the user may not see the changed attribute get updated when instructional information is presented to the user either indicating a special mode they may be in or next steps they can take visual specification visual proposals concept a concept b concept c concept d concept e concept f attachments notification 07 png image png notification 08 png image png notification 06 png image png notification 05 png image png notification 04 png image png notification 02 png image png notification 01 png image png document generated by confluence on mar 07 2016 12 06 atlassian " } ] },
      { id:"input-controls",
        alias:"Input Controls",
        type:"category",
        route:"ui-components.input-controls",
        items:[ { id:"text",
            alias:"Text",
            type:"route",
            route:"ui-components.input-controls.text",
            keywords:"summary accept and display input text related topics auto complete text field suggestions based on a data source forms usage in form contexts password masked input to hide characters text area text input with multiple rows behaviors accepts and displays input text input text is left aligned but can be right aligned when required e g some numeric input focusing the component selects any existing input text focusing the component displays a clear button which can remove all input text may conditionally indicate an error state can display a prompt when required roadmap can display units of measure when required guidelines validate input when the text field value has an expected format if invalid input text is provided the text field should indicate an error state when the text field loses focus display appropriate units of measure when the text field value will be interpreted according to a unit of measure e g gb mb kb use prompt text as a last resort to supplement context labels and instructions avoid overflow when possible by sizing text fields to comfortably accomodate the expected input length visual specification ",
            items:[ { id:"min",
                alias:"First",
                type:"route",
                route:"link.min" } ] },
          { id:"text-area",
            alias:"Text Area",
            type:"route",
            route:"ui-components.input-controls.text-area",
            keywords:"summary the text area field text field that supports the input of multiple rows of text behaviors a text area field is a rectangular area in which the user enters text or modifies existing text it is multiple lines in height as opposed to being a single line text will wrap within the text area field if the inputted characters are more than can be displayed a scroll bar will be displayed if disabled text is displayed the scroll bar is still operational there is no option to display hidden characters for a text area field there is no option for auto completion in the text area field a text area field can be validated to provide error state and error text below the text area field for a text area field that is already populated with text selecting in the text field will highlight the whole contents an x is displayed at the bottom right corner of the text area field to clear the inputted characters guidelines text areas are typically used to collect more lengthy textual input from a user an example where the text area field would be used is a note where free form text that can vary from several characters to sentences see text field usage guidelines the same usage guidelines apply but might not be as relevant text area field should be at least 2 lines in height the length of the text area field will depend on the the context it is being used in general rule is 50 of the expected content it needs to be a reasonable size so it is long enough to accept input seek professional help a scroll bar is displayed when text is longer than the text area field visual specification ",
            items:[ { id:"min",
                alias:"First",
                type:"route",
                route:"link.min" } ] },
          { id:"password",
            alias:"Password",
            type:"route",
            route:"ui-components.input-controls.password",
            keywords:"summary a password input box accepts the user entered input it is a simple text field that can display asterisk for each character behaviors a password input field is a text field in which the user enters a value or modifies a value use a password input field to allow a user to input a value that needs to remain hidden as the user types by default always hide the text with asterisks unless stated by the user in appropriate circumstances allow the user to show the characters that were typed by selecting the show indicator if the user has selected the show indicator the icon changes to the hide indicator if the user has selected the hide indicator the icon changes to the show indicator and displays the characters as asterisks display error messages below the password input field if error display the error text and the border of the password input field in red see visual specification all text in the password input field should be left aligned an indicator is visible when the caps lock key is on guidelines see text field for basic usage guidelines of the password input field in particular circumstances it might be appropriate to allow the user to see the characters they are typing if that is the case provide the user with the ability to show the characters by selecting the show indicator button that would be displayed in the password input field when the user selects show indicator the control then changes to hide indicator to hide the characters for passwords this would be used when creating a password such that you don t have to have double password entry visual specification ",
            items:[ { id:"min",
                alias:"First",
                type:"route",
                route:"link.min" } ] },
          { id:"file-chooser",
            alias:"File Chooser",
            type:"route",
            route:"ui-components.input-controls.file-chooser",
            keywords:"coming soon " },
          { id:"select",
            alias:"Select",
            type:"route",
            route:"ui-components.input-controls.select",
            keywords:"coming soon " },
          { id:"slider",
            alias:"Slider",
            type:"route",
            route:"ui-components.input-controls.slider",
            keywords:"coming soon " },
          { id:"modal-dialog-input",
            alias:"Modal Dialog Input",
            type:"route",
            route:"ui-components.input-controls.modal-dialog-input",
            keywords:"coming soon ",
            modalName:"frost-create-form",
            modal:{ withParams:"showModalForm",
              dialogClass:"frost-bunsen-form-dialog",
              actions:{ save:"save" } } } ] },
      { id:"text",
        alias:"Text",
        type:"category",
        route:"ui-components.text",
        items:[ { id:"tone",
            alias:"Tone",
            type:"route",
            route:"ui-components.text.tone",
            keywords:"coming soon " },
          { id:"capitalization",
            alias:"Capitalization",
            type:"route",
            route:"ui-components.text.capitalization",
            keywords:"coming soon " },
          { id:"titles",
            alias:"Titles",
            type:"route",
            route:"ui-components.text.titles",
            keywords:"coming soon " },
          { id:"labels",
            alias:"Labels",
            type:"route",
            route:"ui-components.text.labels",
            keywords:"coming soon " },
          { id:"units",
            alias:"Units",
            type:"route",
            route:"ui-components.text.units",
            keywords:"coming soon " },
          { id:"truncation",
            alias:"Truncation",
            type:"route",
            route:"ui-components.text.truncation",
            keywords:"coming soon " } ] },
      { id:"content-views",
        alias:"Content Views",
        type:"category",
        route:"ui-components.content-views",
        items:[ { id:"about-dialog",
            alias:"About Dialog",
            type:"route",
            route:"ui-components.content-views.about-dialog",
            keywords:"coming soon ",
            modalName:"frost-about-dialog",
            modal:{ withParams:"isAboutVisible",
              dialogClass:"frost-bunsen-form-dialog",
              otherParams:[ { dialogType:"company" },
                { dialogTitle:"title" },
                { dialogMessage:"message" },
                { dialogServerMessage:"serverMessage" },
                { dialogCopyrightText:"copyrightText" },
                { dialogLicenseText:"licenseText" } ],
              actions:{ save:"dialogConfirmed" } } },
          { id:"accordion",
            alias:"Accordion",
            type:"route",
            route:"ui-components.content-views.accordion",
            keywords:"coming soon " },
          { id:"collapsible-section",
            alias:"Collapsible Section",
            type:"route",
            route:"ui-components.content-views.collapsible-section",
            keywords:"blue planet blue planet collapsible sections vi created by brian choi last modified by christiane campbell on mar 04 2016 description collapsible sections group related content in forms and content canvases users can manually collapse them to help manage what is visible in a canvas visual real estate two forms of collapsible section components exist 2 column section title is to the left of the contents used in forms parameter listings single column section title is above the contents insert 2 pictures 2 column expanded default with title icon for affordance and show collapsed single column expanded default with title icon for affordance and show collapsed behaviors all collapsible sections have a title to explain the contents of the section when a section is collapsed display the section s title immediately next to the expand collapse icon collapse the section to the size of the title which may wrap if the title is long especially in the 2 column component hide the contents of the section but you may wish to display additional summary information instruction text collapsing or expanding one of these sections has no influence on other collapsible sections in the canvas in other words multiple can be expanded at once usage guidelines use short titles to avoid wrapping as much as possible generally collapsible sections should be expanded by default unless the content relies on previous user entries for example this may happen in a form in forms if there are required fields within a collapsible section use the required marker to indicate this on the collapsible section itself visible whether expanded or collapsed when these sections are collapsed it is often useful to add summary information next to the title or instruction text in a form to help the user understand what s hidden visual specification lt insert picture gt document generated by confluence on mar 07 2016 12 06 atlassian " },
          { id:"info-pods",
            alias:"Info Pods",
            type:"route",
            route:"ui-components.content-views.info-pods",
            keywords:"coming soon " },
          { id:"list",
            alias:"List",
            type:"route",
            route:"ui-components.content-views.list",
            keywords:"coming soon " },
          { id:"modal-dialog",
            alias:"Modal Dialog",
            type:"route",
            route:"ui-components.content-views.modal-dialog",
            keywords:"blue planet blue planet dialog rr created by brian choi last modified by katherine parmeson on mar 07 2016 description a dialog is a window that is used to elicit a response form the user behaviors dialogs are 550px or 900px wide and appear at a fixed position 80px from the top of the browser s visible area centered horizontally a dialog will open on top of a translucent background with a minimum of a close button the one exception to the close button is on the about dialog which will have an x in the upper right and will also allow a user to click anywhere outside the dialog to close it all dialogs will allow a user to have access to the app bar if they choose to navigate away navigating away from an input form will open a dialog on top of the existing input form warning the user of the potential for loss of data always display a title brief but specific text informing the user exactly what will happen always display a call to action buttons primary action to the right with cancel button to the left see buttons for guidelines label button clearly with the action they will invoke refrain from using yes no and ok cancel labels usage guidelines a dialog should be used when the system needs to request information or input from the user this could be in response to a user initiated action or a specific state of the system there are four categories of dialogs the input form confirmation status and error dialog input form a input form is used when the system needs to get input from the user this is most likely used during the process of creating or editing an object this dialog will generally have a create or save button as the primary right most button and a cancel button to the left if the user has made any changes to an input form and choose to use the app bar to navigate away they will be prompted with a second dialog warning them of possible loss of data confirmation dialog are presented whenever a user is performing a potentially destructive action or when the action is time consuming to reverse it can contain warning image if the action performed will affect the system or is destructive cancel button should be on focus when dialog is opened so users will not accidentally perform the action for more guidelines see notifications remove the visual specs from these pictures mulit object confirmation dialogs are presented to users when performing certain actions that involve multiple objects they can contain warning image if the action performed will affect the system or is destructive a list of affected objects will be displayed below the message cancel button should be on focus when dialog is opened so users will not accidentally perform the action error dialogs begin the message with the name of the object being acted upon for an error dialog clearly state the nature of the error and how the user can correct it if appropriate provide a link for the user to quickly navigate to the object in error for more guidelines see notifications status dialogs for a status dialog incorporate the appropriate percent complete notification indicator details for more guidelines see notifications visual specification need general dialog specs and then anything specific attachments image2016 1 25 15 18 16 png image png image2016 1 25 15 18 41 png image png image2016 1 25 15 19 11 png image png image2016 1 25 15 20 21 png image png image2016 2 5 11 36 57 png image png image2016 2 5 11 37 10 png image png image2016 2 5 11 38 44 png image png image2016 2 12 10 36 38 png image png image2016 2 12 11 1 45 png image png image2016 2 12 11 23 51 png image png dialog full screen png image png image2016 2 12 13 7 27 png image png image2016 2 12 13 27 13 png image png image2016 2 12 13 49 38 png image png image2016 2 12 13 51 29 png image png dialog error png image png screen shot 2016 03 02 at 2 27 26 pm png image png document generated by confluence on mar 07 2016 12 06 atlassian " },
          { id:"scrollbar",
            alias:"Scrollbar",
            type:"route",
            route:"ui-components.content-views.scrollbar",
            keywords:"blue planet blue planet scrollbar vi created by brian choi last modified by christiane campbell on mar 04 2016 description when content can t fit inside a scrollable canvas a scrollbar allows users to change the content of the visible canvas by moving content up down or side to side lt picture vertical scrollbar gt behaviors scrollbars appear only when a user invokes a scroll gesture e g mouse middle button scroll gesture on touchpad or touch device arrow keys users can grab the scroll bar and drag it to move the content clicking tapping further in the scroll area shifts the content to that relative area of the overall canvas non contiguous scrolling scroll areas span the full length of the canvas the length of the scroll bar is proportional to the visible content height relative to the entire height of the canvas usage guidelines scrollbars are only when the content does not fit the scrollable canvas do not offer scrollbars if all the content of the scrollable canvas is visible a scrollable canvas should be designed for the content to shift vertically some canvases especially zoomable graphics may have content on all four sides of the visible area in these cases use panning gestures to shift the content rather than scrollbars avoid horizontal scrolling in your ui layouts users hate horizontal scrolling instead design with a minimum screen size in mind if users reduce the size of their web browser below that threshold the browser s scrollbars will be invoked visual specification lt insert visual spec gt document generated by confluence on mar 07 2016 12 06 atlassian " },
          { id:"table",
            alias:"Table",
            type:"route",
            route:"ui-components.content-views.table",
            keywords:"coming soon " },
          { id:"tabs",
            alias:"Tabs",
            type:"route",
            route:"ui-components.content-views.tabs",
            keywords:"coming soon " },
          { id:"info-bar",
            alias:"Info Bar",
            type:"route",
            route:"ui-components.content-views.info-bar",
            keywords:"coming soon " },
          { id:"sort",
            alias:"Sort",
            type:"route",
            route:"ui-components.content-views.sort",
            keywords:"blue planet blue planet sort vi created by katherine parmeson last modified on mar 07 2016 description the sort component should be available whenever an object browser is used it should be visible for both the list browser and the table browser the sort component allows a user to sort on as many attributes as they would like and easily change or remove any sort attribute behaviors each list browser will always be a default sort the user can sort by as many columns at a time that they wish to the user can easily remove any sort the table browser will have the added functionality of allowing the user to click on the column headings to sort columns when the user clicks on a header the sort component will respond accordingly and show the newly sorted column name usage guidelines first item in sort will be set by default button drop down for user to select adding additional sort attributes an x will be placed to the left of every sort object so the user can easily remove a sort secondary sort user could add as many levels of sort as they have attributes selection list for use to easily change the attribute they are sorting on visual specification attachments screen shot 2016 01 14 at 11 27 22 am png image png screen shot 2016 01 14 at 1 58 25 pm png image png screen shot 2016 01 15 at 8 13 17 am png image png screen shot 2016 01 15 at 8 29 56 am png image png screen shot 2016 01 15 at 8 54 16 am png image png image2016 2 1 13 9 41 png image png image2016 2 1 13 10 35 png image png document generated by confluence on mar 07 2016 12 06 atlassian " } ] },
      { id:"icons",
        alias:"Icons",
        type:"route",
        route:"ui-components.icons",
        keywords:"coming soon ",
        items:[ { id:"min",
            alias:"First",
            type:"route",
            route:"link.min" } ] } ] },
  { id:"contributing",
    alias:"Contributing",
    type:"category",
    route:"contributing",
    items:[ { id:"frost-guide",
        alias:"Frost Guide",
        type:"route",
        route:"contributing.frost-guide",
        keywords:"editing an existing page fork the repository edit the markdown file inside the markdown directory that corresponds to the page you wish to edit push the changes to the fork create a pull request adding a new page fork the repository create folder and markdown files inside the markdown directory with a prefix of 0 9 eg 01 overview 02 roadmap md the prefixes dictate the order of the tabs on the navigation sidebar push the changes to the fork create a pull request editing scrollspy tabs the scrollspy is the table of contents on the right side of every page each one is automatically built from the level 1 2 and 3 atx style headers in the page s corresponding markdown file also note that the level of the header will affect the indentation and font size of the text in the scrollspy this level 1 header would appear in the scrollspy this level 2 header would appear in the scrollspy this level 3 header would appear in the scrollspy if you wish to add a header that does not appear in the scrollspy you can use setext style headers or level 4 5 and 6 atx style headers this header would not appear in the scrollspy this header would not appear in the scrollspy this level 4 header would not appear in the scrollspy this level 5 header would not appear in the scrollspy this level 6 header would not appear in the scrollspy creating component pages just like regular pages component pages require the creation of markdown files and folders where you wish to have your content appear the markdown file will act as the content of the description tab for the component page the package json file in the component s repository must have a frostguidedirectory attribute where the value is equal to the markdown file location in the markdown folder stripped of prefix and file extension md frostguidedirectory ui components button controls button updating component pages updates of the content in the api and demo tabs has to be done in the component s repository however the changes made to the readme or demo page in a frost component repository will not be reflected on this site until a new build is triggered follow these instructions to trigger a new build fork the repository increment the version number in the package json file located in the root directory name frost guide version 0 0 1 version 0 0 2 push the change to the fork create a pull request adding images images must be placed in the public assets images folder please make subdirectories for individual pages referencing the image in markdown inline style reference style logo assets images test png logo title text 2 " },
      { id:"contributors",
        alias:"Contributors",
        type:"route",
        route:"contributing.contributors.contributors" },
      { id:"contributor",
        alias:"Contributor",
        type:"route",
        route:"contributing.contributors.contributor" } ] } ]
